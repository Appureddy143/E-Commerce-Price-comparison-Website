<?php
/**
 * This script is the "brain" for reading product data from your Excel file.
 * It uses the PhpSpreadsheet library, which is a powerful tool for working
 * with spreadsheet files in PHP.
 */

// This line is essential. It includes the autoloader generated by Composer.
require 'vendor/autoload.php';

// This "use" statement is a shortcut for the PhpSpreadsheet IOFactory class.
use PhpOffice\PhpSpreadsheet\IOFactory;

/**
 * Reads the 'prices.xlsx' file, processes the data, and returns a
 * structured list of products, accounting for the column shift in the user's Excel file.
 *
 * @param string $search_term The text from the user's search. Defaults to empty.
 * @return array Returns an array of products.
 */
function get_products_from_excel(string $search_term = ''): array {
    $excel_file = "prices.xlsx";

    // --- Step 1: Safety Check ---
    if (!file_exists($excel_file)) {
        die("Error: The file 'prices.xlsx' was not found. Please create it in your project folder.");
    }

    // --- Step 2: Load and Read the Excel File ---
    try {
        $spreadsheet = IOFactory::load($excel_file);
        $sheet = $spreadsheet->getActiveSheet();
        // Convert the entire sheet into a PHP array.
        $data = $sheet->toArray(null, true, true, true);
    } catch (\PhpOffice\PhpSpreadsheet\Reader\Exception $e) {
        die("Error loading the Excel file. It might be corrupted. Details: " . $e->getMessage());
    }

    // If there are no product rows, return an empty array.
    if (count($data) < 3) { // We need at least 3 rows: junk, header, and one product.
        return [];
    }

    // --- Step 3: Process the Raw Data into a Clean Product List ---
    $products = [];

    // **CORRECTION:** We start the loop at row 3 to skip the first two rows (the junk row and the header row).
    for ($row = 3; $row <= count($data); $row++) {
        // **CORRECTION:** Reading data from the correct columns (B, C, D, E, F, G).
        $productName = isset($data[$row]['B']) ? trim($data[$row]['B']) : '';
        $store       = isset($data[$row]['C']) ? trim($data[$row]['C']) : '';
        $price       = isset($data[$row]['D']) ? (float)trim($data[$row]['D']) : 0;
        $url         = isset($data[$row]['E']) ? trim($data[$row]['E']) : '';
        $imageUrl    = isset($data[$row]['F']) ? trim($data[$row]['F']) : '';
        $description = isset($data[$row]['G']) ? trim($data[$row]['G']) : '';

        // If a row has no product name, we skip it.
        if (empty($productName)) {
            continue;
        }

        // Search logic: If a search is active, skip products that don't match.
        if (!empty($search_term) && stripos($productName, $search_term) === false) {
            continue;
        }

        // --- Core Grouping Logic ---
        // If we haven't seen this product yet, create its main entry.
        if (!isset($products[$productName])) {
            $products[$productName] = [
                'title'        => $productName,
                'image'        => $imageUrl,
                'description'  => $description,
                'lowest_price' => $price,
                'stores'       => [], // An empty list to hold all store offers.
            ];
        }

        // Check if this new price is the lowest we've seen for this product.
        if ($price < $products[$productName]['lowest_price']) {
            $products[$productName]['lowest_price'] = $price;
        }

        // Add the current row's store and price details to this product's list.
        $products[$productName]['stores'][] = [
            'name'  => $store,
            'price' => $price,
            'url'   => $url,
        ];
    }

    // --- Step 4: Finalize and Return ---
    // Convert the associative array to a simple, numerically indexed array.
    return array_values($products);
}

/**
 * Finds all the stored prices and details for a single product.
 *
 * @param string $product_name The exact name of the product we want to find.
 * @return array|null Returns the complete product array if found, otherwise null.
 */
function get_product_details_from_excel(string $product_name): ?array {
    $all_products = get_products_from_excel();
    foreach ($all_products as $product) {
        if ($product['title'] === $product_name) {
            return $product;
        }
    }
    return null;
}
?>

